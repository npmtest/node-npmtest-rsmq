{"/home/travis/build/npmtest/node-npmtest-rsmq/test.js":"/* istanbul instrument in package npmtest_rsmq */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rsmq/lib.npmtest_rsmq.js":"/* istanbul instrument in package npmtest_rsmq */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rsmq = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rsmq = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rsmq/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rsmq && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rsmq */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rsmq\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rsmq.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_rsmq.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rsmq.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_rsmq.__dirname + '/lib.npmtest_rsmq.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rsmq/node_modules/rsmq/index.js":"// Generated by CoffeeScript 1.11.1\n\n/*\nrsmq\n\nA Really Simple Message Queue based on Redis\n\nThe MIT License (MIT)\n\nCopyright © 2013-2016 Patrick Liess, http://www.tcs.de\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nvar EventEmitter, RedisInst, RedisSMQ, _, crypto,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\ncrypto = require(\"crypto\");\n\n_ = require(\"lodash\");\n\nRedisInst = require(\"redis\");\n\nEventEmitter = require(\"events\").EventEmitter;\n\nRedisSMQ = (function(superClass) {\n  extend(RedisSMQ, superClass);\n\n  function RedisSMQ(options) {\n    var opts, ref, ref1;\n    if (options == null) {\n      options = {};\n    }\n    this._initErrors = bind(this._initErrors, this);\n    this._handleError = bind(this._handleError, this);\n    this.setQueueAttributes = bind(this.setQueueAttributes, this);\n    this.sendMessage = bind(this.sendMessage, this);\n    this._receiveMessage = bind(this._receiveMessage, this);\n    this._popMessage = bind(this._popMessage, this);\n    this.receiveMessage = bind(this.receiveMessage, this);\n    this.popMessage = bind(this.popMessage, this);\n    this.listQueues = bind(this.listQueues, this);\n    this.getQueueAttributes = bind(this.getQueueAttributes, this);\n    this.deleteQueue = bind(this.deleteQueue, this);\n    this.deleteMessage = bind(this.deleteMessage, this);\n    this.createQueue = bind(this.createQueue, this);\n    this._changeMessageVisibility = bind(this._changeMessageVisibility, this);\n    this.changeMessageVisibility = bind(this.changeMessageVisibility, this);\n    this._getQueue = bind(this._getQueue, this);\n    this.quit = bind(this.quit, this);\n    opts = _.extend({\n      host: \"127.0.0.1\",\n      port: 6379,\n      options: {},\n      client: null,\n      ns: \"rsmq\"\n    }, options);\n    this.redisns = opts.ns + \":\";\n    if (((ref = opts.client) != null ? (ref1 = ref.constructor) != null ? ref1.name : void 0 : void 0) === \"RedisClient\") {\n      this.redis = opts.client;\n    } else {\n      this.redis = RedisInst.createClient(opts.port, opts.host, opts.options);\n    }\n    this.connected = this.redis.connected || false;\n    if (this.connected) {\n      this.emit(\"connect\");\n      this.initScript();\n    }\n    this.redis.on(\"connect\", (function(_this) {\n      return function() {\n        _this.connected = true;\n        _this.emit(\"connect\");\n        _this.initScript();\n      };\n    })(this));\n    this.redis.on(\"error\", (function(_this) {\n      return function(err) {\n        if (err.message.indexOf(\"ECONNREFUSED\")) {\n          _this.connected = false;\n          _this.emit(\"disconnect\");\n        } else {\n          console.error(\"Redis ERROR\", err);\n          _this.emit(\"error\");\n        }\n      };\n    })(this));\n    this._initErrors();\n    return;\n  }\n\n  RedisSMQ.prototype.quit = function() {\n    this.redis.quit();\n  };\n\n  RedisSMQ.prototype._getQueue = function(qname, uid, cb) {\n    var mc;\n    mc = [[\"hmget\", \"\" + this.redisns + qname + \":Q\", \"vt\", \"delay\", \"maxsize\"], [\"time\"]];\n    this.redis.multi(mc).exec((function(_this) {\n      return function(err, resp) {\n        var ms, q, ts;\n        if (err) {\n          _this._handleError(cb, err);\n          return;\n        }\n        if (resp[0][0] === null || resp[0][1] === null || resp[0][2] === null) {\n          _this._handleError(cb, \"queueNotFound\");\n          return;\n        }\n        ms = _this._formatZeroPad(Number(resp[1][1]), 6);\n        ts = Number(resp[1][0] + ms.toString(10).slice(0, 3));\n        q = {\n          vt: parseInt(resp[0][0], 10),\n          delay: parseInt(resp[0][1], 10),\n          maxsize: parseInt(resp[0][2], 10),\n          ts: ts\n        };\n        if (uid) {\n          uid = _this._makeid(22);\n          q.uid = Number(resp[1][0] + ms).toString(36) + uid;\n        }\n        cb(null, q);\n      };\n    })(this));\n  };\n\n  RedisSMQ.prototype.changeMessageVisibility = function(options, cb) {\n    if (this._validate(options, [\"qname\", \"id\", \"vt\"], cb) === false) {\n      return;\n    }\n    this._getQueue(options.qname, false, (function(_this) {\n      return function(err, q) {\n        if (err) {\n          _this._handleError(cb, err);\n          return;\n        }\n        if (_this.changeMessageVisibility_sha1) {\n          _this._changeMessageVisibility(options, q, cb);\n          return;\n        }\n        _this.on('scriptload:changeMessageVisibility', function() {\n          _this._changeMessageVisibility(options, q, cb);\n        });\n      };\n    })(this));\n  };\n\n  RedisSMQ.prototype._changeMessageVisibility = function(options, q, cb) {\n    this.redis.evalsha(this.changeMessageVisibility_sha1, 3, \"\" + this.redisns + options.qname, options.id, q.ts + options.vt * 1000, (function(_this) {\n      return function(err, resp) {\n        if (err) {\n          _this._handleError(cb, err);\n          return;\n        }\n        cb(null, resp);\n      };\n    })(this));\n  };\n\n  RedisSMQ.prototype.createQueue = function(options, cb) {\n    var ref, ref1, ref2;\n    options.vt = (ref = options.vt) != null ? ref : 30;\n    options.delay = (ref1 = options.delay) != null ? ref1 : 0;\n    options.maxsize = (ref2 = options.maxsize) != null ? ref2 : 65536;\n    if (this._validate(options, [\"qname\", \"vt\", \"delay\", \"maxsize\"], cb) === false) {\n      return;\n    }\n    this.redis.time((function(_this) {\n      return function(err, resp) {\n        var mc;\n        if (err) {\n          _this._handleError(cb, err);\n          return;\n        }\n        mc = [[\"hsetnx\", \"\" + _this.redisns + options.qname + \":Q\", \"vt\", options.vt], [\"hsetnx\", \"\" + _this.redisns + options.qname + \":Q\", \"delay\", options.delay], [\"hsetnx\", \"\" + _this.redisns + options.qname + \":Q\", \"maxsize\", options.maxsize], [\"hsetnx\", \"\" + _this.redisns + options.qname + \":Q\", \"created\", resp[0]], [\"hsetnx\", \"\" + _this.redisns + options.qname + \":Q\", \"modified\", resp[0]]];\n        _this.redis.multi(mc).exec(function(err, resp) {\n          if (err) {\n            _this._handleError(cb, err);\n            return;\n          }\n          if (resp[0] === 0) {\n            _this._handleError(cb, \"queueExists\");\n            return;\n          }\n          _this.redis.sadd(_this.redisns + \"QUEUES\", options.qname, function(err, resp) {\n            if (err) {\n              _this._handleError(cb, err);\n              return;\n            }\n            cb(null, 1);\n          });\n        });\n      };\n    })(this));\n  };\n\n  RedisSMQ.prototype.deleteMessage = function(options, cb) {\n    var key, mc;\n    if (this._validate(options, [\"qname\", \"id\"], cb) === false) {\n      return;\n    }\n    key = \"\" + this.redisns + options.qname;\n    mc = [[\"zrem\", key, options.id], [\"hdel\", key + \":Q\", \"\" + options.id, options.id + \":rc\", options.id + \":fr\"]];\n    this.redis.multi(mc).exec((function(_this) {\n      return function(err, resp) {\n        if (err) {\n          _this._handleError(cb, err);\n          return;\n        }\n        if (resp[0] === 1 && resp[1] > 0) {\n          cb(null, 1);\n        } else {\n          cb(null, 0);\n        }\n      };\n    })(this));\n  };\n\n  RedisSMQ.prototype.deleteQueue = function(options, cb) {\n    var key, mc;\n    if (this._validate(options, [\"qname\"], cb) === false) {\n      return;\n    }\n    key = \"\" + this.redisns + options.qname;\n    mc = [[\"del\", key + \":Q\"], [\"del\", key], [\"srem\", this.redisns + \"QUEUES\", options.qname]];\n    this.redis.multi(mc).exec((function(_this) {\n      return function(err, resp) {\n        if (err) {\n          _this._handleError(cb, err);\n          return;\n        }\n        if (resp[0] === 0) {\n          _this._handleError(cb, \"queueNotFound\");\n          return;\n        }\n        cb(null, 1);\n      };\n    })(this));\n  };\n\n  RedisSMQ.prototype.getQueueAttributes = function(options, cb) {\n    var key;\n    if (this._validate(options, [\"qname\"], cb) === false) {\n      return;\n    }\n    key = \"\" + this.redisns + options.qname;\n    this.redis.time((function(_this) {\n      return function(err, resp) {\n        var mc;\n        if (err) {\n          _this._handleError(cb, err);\n          return;\n        }\n        mc = [[\"hmget\", key + \":Q\", \"vt\", \"delay\", \"maxsize\", \"totalrecv\", \"totalsent\", \"created\", \"modified\"], [\"zcard\", key], [\"zcount\", key, resp[0] + \"000\", \"+inf\"]];\n        _this.redis.multi(mc).exec(function(err, resp) {\n          var o;\n          if (err) {\n            _this._handleError(cb, err);\n            return;\n          }\n          if (resp[0][0] === null) {\n            _this._handleError(cb, \"queueNotFound\");\n            return;\n          }\n          o = {\n            vt: parseInt(resp[0][0], 10),\n            delay: parseInt(resp[0][1], 10),\n            maxsize: parseInt(resp[0][2], 10),\n            totalrecv: parseInt(resp[0][3], 10) || 0,\n            totalsent: parseInt(resp[0][4], 10) || 0,\n            created: parseInt(resp[0][5], 10),\n            modified: parseInt(resp[0][6], 10),\n            msgs: resp[1],\n            hiddenmsgs: resp[2]\n          };\n          cb(null, o);\n        });\n      };\n    })(this));\n  };\n\n  RedisSMQ.prototype._handleReceivedMessage = function(cb) {\n    return (function(_this) {\n      return function(err, resp) {\n        var o;\n        if (err) {\n          _this._handleError(cb, err);\n          return;\n        }\n        if (!resp.length) {\n          cb(null, {});\n          return;\n        }\n        o = {\n          id: resp[0],\n          message: resp[1],\n          rc: resp[2],\n          fr: Number(resp[3]),\n          sent: parseInt(parseInt(resp[0].slice(0, 10), 36) / 1000)\n        };\n        cb(null, o);\n      };\n    })(this);\n  };\n\n  RedisSMQ.prototype.initScript = function(cb) {\n    var script_changeMessageVisibility, script_popMessage, script_receiveMessage;\n    script_popMessage = 'local msg = redis.call(\"ZRANGEBYSCORE\", KEYS[1], \"-inf\", KEYS[2], \"LIMIT\", \"0\", \"1\") if #msg == 0 then return {} end redis.call(\"HINCRBY\", KEYS[1] .. \":Q\", \"totalrecv\", 1) local mbody = redis.call(\"HGET\", KEYS[1] .. \":Q\", msg[1]) local rc = redis.call(\"HINCRBY\", KEYS[1] .. \":Q\", msg[1] .. \":rc\", 1) local o = {msg[1], mbody, rc} if rc==1 then table.insert(o, KEYS[2]) else local fr = redis.call(\"HGET\", KEYS[1] .. \":Q\", msg[1] .. \":fr\") table.insert(o, fr) end redis.call(\"ZREM\", KEYS[1], msg[1]) redis.call(\"HDEL\", KEYS[1] .. \":Q\", msg[1], msg[1] .. \":rc\", msg[1] .. \":fr\") return o';\n    script_receiveMessage = 'local msg = redis.call(\"ZRANGEBYSCORE\", KEYS[1], \"-inf\", KEYS[2], \"LIMIT\", \"0\", \"1\") if #msg == 0 then return {} end redis.call(\"ZADD\", KEYS[1], KEYS[3], msg[1]) redis.call(\"HINCRBY\", KEYS[1] .. \":Q\", \"totalrecv\", 1) local mbody = redis.call(\"HGET\", KEYS[1] .. \":Q\", msg[1]) local rc = redis.call(\"HINCRBY\", KEYS[1] .. \":Q\", msg[1] .. \":rc\", 1) local o = {msg[1], mbody, rc} if rc==1 then redis.call(\"HSET\", KEYS[1] .. \":Q\", msg[1] .. \":fr\", KEYS[2]) table.insert(o, KEYS[2]) else local fr = redis.call(\"HGET\", KEYS[1] .. \":Q\", msg[1] .. \":fr\") table.insert(o, fr) end return o';\n    script_changeMessageVisibility = 'local msg = redis.call(\"ZSCORE\", KEYS[1], KEYS[2]) if not msg then return 0 end redis.call(\"ZADD\", KEYS[1], KEYS[3], KEYS[2]) return 1';\n    this.redis.script(\"load\", script_popMessage, (function(_this) {\n      return function(err, resp) {\n        if (err) {\n          console.log(err);\n          return;\n        }\n        _this.popMessage_sha1 = resp;\n        _this.emit('scriptload:popMessage');\n      };\n    })(this));\n    this.redis.script(\"load\", script_receiveMessage, (function(_this) {\n      return function(err, resp) {\n        if (err) {\n          console.log(err);\n          return;\n        }\n        _this.receiveMessage_sha1 = resp;\n        _this.emit('scriptload:receiveMessage');\n      };\n    })(this));\n    this.redis.script(\"load\", script_changeMessageVisibility, (function(_this) {\n      return function(err, resp) {\n        _this.changeMessageVisibility_sha1 = resp;\n        _this.emit('scriptload:changeMessageVisibility');\n      };\n    })(this));\n  };\n\n  RedisSMQ.prototype.listQueues = function(cb) {\n    this.redis.smembers(this.redisns + \"QUEUES\", (function(_this) {\n      return function(err, resp) {\n        if (err) {\n          _this._handleError(cb, err);\n          return;\n        }\n        cb(null, resp);\n      };\n    })(this));\n  };\n\n  RedisSMQ.prototype.popMessage = function(options, cb) {\n    if (this._validate(options, [\"qname\"], cb) === false) {\n      return;\n    }\n    this._getQueue(options.qname, false, (function(_this) {\n      return function(err, q) {\n        if (err) {\n          _this._handleError(cb, err);\n          return;\n        }\n        if (_this.popMessage_sha1) {\n          _this._popMessage(options, q, cb);\n          return;\n        }\n        _this.on('scriptload:popMessage', function() {\n          _this._popMessage(options, q, cb);\n        });\n      };\n    })(this));\n  };\n\n  RedisSMQ.prototype.receiveMessage = function(options, cb) {\n    if (this._validate(options, [\"qname\"], cb) === false) {\n      return;\n    }\n    this._getQueue(options.qname, false, (function(_this) {\n      return function(err, q) {\n        var ref;\n        if (err) {\n          _this._handleError(cb, err);\n          return;\n        }\n        options.vt = (ref = options.vt) != null ? ref : q.vt;\n        if (_this._validate(options, [\"vt\"], cb) === false) {\n          return;\n        }\n        if (_this.receiveMessage_sha1) {\n          _this._receiveMessage(options, q, cb);\n          return;\n        }\n        _this.on('scriptload:receiveMessage', function() {\n          _this._receiveMessage(options, q, cb);\n        });\n      };\n    })(this));\n  };\n\n  RedisSMQ.prototype._popMessage = function(options, q, cb) {\n    this.redis.evalsha(this.popMessage_sha1, 2, \"\" + this.redisns + options.qname, q.ts, this._handleReceivedMessage(cb));\n  };\n\n  RedisSMQ.prototype._receiveMessage = function(options, q, cb) {\n    this.redis.evalsha(this.receiveMessage_sha1, 3, \"\" + this.redisns + options.qname, q.ts, q.ts + options.vt * 1000, this._handleReceivedMessage(cb));\n  };\n\n  RedisSMQ.prototype.sendMessage = function(options, cb) {\n    if (this._validate(options, [\"qname\"], cb) === false) {\n      return;\n    }\n    this._getQueue(options.qname, true, (function(_this) {\n      return function(err, q) {\n        var mc, ref;\n        if (err) {\n          _this._handleError(cb, err);\n          return;\n        }\n        options.delay = (ref = options.delay) != null ? ref : q.delay;\n        if (_this._validate(options, [\"delay\"], cb) === false) {\n          return;\n        }\n        if (typeof options.message !== \"string\") {\n          _this._handleError(cb, \"messageNotString\");\n          return;\n        }\n        if (q.maxsize !== -1 && options.message.length > q.maxsize) {\n          _this._handleError(cb, \"messageTooLong\");\n          return;\n        }\n        mc = [[\"zadd\", \"\" + _this.redisns + options.qname, q.ts + options.delay * 1000, q.uid], [\"hset\", \"\" + _this.redisns + options.qname + \":Q\", q.uid, options.message], [\"hincrby\", \"\" + _this.redisns + options.qname + \":Q\", \"totalsent\", 1]];\n        _this.redis.multi(mc).exec(function(err, resp) {\n          if (err) {\n            _this._handleError(cb, err);\n            return;\n          }\n          cb(null, q.uid);\n        });\n      };\n    })(this));\n  };\n\n  RedisSMQ.prototype.setQueueAttributes = function(options, cb) {\n    var item, j, k, key, len1, props;\n    props = [\"vt\", \"maxsize\", \"delay\"];\n    k = [];\n    for (j = 0, len1 = props.length; j < len1; j++) {\n      item = props[j];\n      if (options[item] != null) {\n        k.push(item);\n      }\n    }\n    if (!k.length) {\n      this._handleError(cb, \"noAttributeSupplied\");\n      return;\n    }\n    if (this._validate(options, [\"qname\"].concat(k), cb) === false) {\n      return;\n    }\n    key = \"\" + this.redisns + options.qname;\n    this._getQueue(options.qname, false, (function(_this) {\n      return function(err, q) {\n        if (err) {\n          _this._handleError(cb, err);\n          return;\n        }\n        _this.redis.time(function(err, resp) {\n          var l, len2, mc;\n          if (err) {\n            _this._handleError(cb, err);\n            return;\n          }\n          mc = [[\"hset\", \"\" + _this.redisns + options.qname + \":Q\", \"modified\", resp[0]]];\n          for (l = 0, len2 = k.length; l < len2; l++) {\n            item = k[l];\n            mc.push([\"hset\", \"\" + _this.redisns + options.qname + \":Q\", item, options[item]]);\n          }\n          _this.redis.multi(mc).exec(function(err, resp) {\n            if (err) {\n              _this._handleError(cb, err);\n              return;\n            }\n            _this.getQueueAttributes(options, cb);\n          });\n        });\n      };\n    })(this));\n  };\n\n  RedisSMQ.prototype._formatZeroPad = function(num, count) {\n    return ((Math.pow(10, count) + num) + \"\").substr(1);\n  };\n\n  RedisSMQ.prototype._handleError = function(cb, err, data) {\n    var _err, ref;\n    if (data == null) {\n      data = {};\n    }\n    if (_.isString(err)) {\n      _err = new Error();\n      _err.name = err;\n      _err.message = ((ref = this._ERRORS) != null ? typeof ref[err] === \"function\" ? ref[err](data) : void 0 : void 0) || \"unkown\";\n    } else {\n      _err = err;\n    }\n    cb(_err);\n  };\n\n  RedisSMQ.prototype._initErrors = function() {\n    var key, msg, ref;\n    this._ERRORS = {};\n    ref = this.ERRORS;\n    for (key in ref) {\n      msg = ref[key];\n      this._ERRORS[key] = _.template(msg);\n    }\n  };\n\n  RedisSMQ.prototype._makeid = function(len) {\n    var i, j, possible, ref, text;\n    text = \"\";\n    possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  };\n\n  RedisSMQ.prototype._VALID = {\n    qname: /^([a-zA-Z0-9_-]){1,160}$/,\n    id: /^([a-zA-Z0-9:]){32}$/\n  };\n\n  RedisSMQ.prototype._validate = function(o, items, cb) {\n    var item, j, len1;\n    for (j = 0, len1 = items.length; j < len1; j++) {\n      item = items[j];\n      switch (item) {\n        case \"qname\":\n        case \"id\":\n          if (!o[item]) {\n            this._handleError(cb, \"missingParameter\", {\n              item: item\n            });\n            return false;\n          }\n          o[item] = o[item].toString();\n          if (!this._VALID[item].test(o[item])) {\n            this._handleError(cb, \"invalidFormat\", {\n              item: item\n            });\n            return false;\n          }\n          break;\n        case \"vt\":\n        case \"delay\":\n          o[item] = parseInt(o[item], 10);\n          if (_.isNaN(o[item]) || !_.isNumber(o[item]) || o[item] < 0 || o[item] > 9999999) {\n            this._handleError(cb, \"invalidValue\", {\n              item: item,\n              min: 0,\n              max: 9999999\n            });\n            return false;\n          }\n          break;\n        case \"maxsize\":\n          o[item] = parseInt(o[item], 10);\n          if (_.isNaN(o[item]) || !_.isNumber(o[item]) || o[item] < 1024 || o[item] > 65536) {\n            if (o[item] !== -1) {\n              this._handleError(cb, \"invalidValue\", {\n                item: item,\n                min: 1024,\n                max: 65536\n              });\n              return false;\n            }\n          }\n      }\n    }\n    return o;\n  };\n\n  RedisSMQ.prototype.ERRORS = {\n    \"noAttributeSupplied\": \"No attribute was supplied\",\n    \"missingParameter\": \"No <%= item %> supplied\",\n    \"invalidFormat\": \"Invalid <%= item %> format\",\n    \"invalidValue\": \"<%= item %> must be between <%= min %> and <%= max %>\",\n    \"messageNotString\": \"Message must be a string\",\n    \"messageTooLong\": \"Message too long\",\n    \"queueNotFound\": \"Queue not found\",\n    \"queueExists\": \"Queue exists\"\n  };\n\n  return RedisSMQ;\n\n})(EventEmitter);\n\nmodule.exports = RedisSMQ;\n"}